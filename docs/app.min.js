"use strict";!function(){angular.module("openWeather",["openWeather.services","openWeather.controllers","openWeather.directives"])}();
"use strict";!function(){function t(t){function n(n){function e(n){return!!n&&t.get(i+n._id).then(a)["catch"](c)}function a(t){return t.data.list.map(u),t.data}function c(t){console.log(t.data)}function u(t){return t.weather[0].icon=""+o+t.weather[0].icon+".png"}function h(n){return t.get(r).then(function(t){var e=new RegExp("^"+n+"$","i");return _.find(t.data,function(t){return t.name.match(e)})})["catch"](function(t){console.log(t.data)})}return h(n).then(e)}var e=this,a="c5ac0098c8c7b7a5512b4679a5b11f9f",c="http://api.openweathermap.org/data/2.5/",r="city.list.json",i=c+"/forecast/daily?APPID="+a+"&units=metric&cnt=6&id=",o="http://openweathermap.org/img/w/";e.getForecast=n}angular.module("openWeather.services",[]).service("weatherAPIService",t),t.$inject=["$http"]}();
"use strict";!function(){function e(e,t,n){function s(){d(),g.citiesNames.map(function(e){g.requests.push(i(e))}),n.all(g.requests).then(function(){u(3e3,"All requests are done.")})}function i(t){return e.getForecast(t).then(function(e){return e?a(e):void c(t)})}function a(e){return g.citiesObjects.unshift(e),f(e.city.name),e}function c(e){m("Could not find city: "+e)}function r(){l()?(m("City already present, please add another city"),u()):(d(),i(g.newCity).then(function(){g.newCity="",u()}))}function o(e){g.citiesObjects.splice(e,1)}function l(){var e=new RegExp("^"+g.newCity+"$","i");return _.find(g.citiesObjects,function(t){return t.city.name.match(e)})}function u(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3e3,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";n&&(g.alert.message=n),t(function(){g.alert.message="",g.alert.cssClass="alert-success"},e)}function f(e){g.alert.message=e+" was added successfully",g.alert.cssClass="alert-success"}function d(){g.alert.message="Fetching data, please wait...",g.alert.cssClass="alert-info"}function m(e){g.alert.message=e,g.alert.cssClass="alert-danger"}var g=this;g.newCity="",g.alert={},g.requests=[],g.citiesObjects=[],g.onSubmit=r,g.getForecast=i,g.removeCity=o,g.citiesNames=["London","Amsterdam","Paris","Tel Aviv"],s()}angular.module("openWeather.controllers",[]).controller("mainController",e),e.$inject=["weatherAPIService","$timeout","$q"]}();
"use strict";!function(){function t(){function t(t){function n(){return t.city.list}function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return n()[t].weather[0]}function i(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return e(t).icon}function r(){return t.city.city.name}function c(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return e(t).description}function o(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return n()[t].temp}function u(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 1e3*n()[t].dt}t.name=r(),t.iconUrl=i(),t.description=c(),t.maxTemp=o().max,t.minTemp=o().min,t.date=u(),t.getParsedDate=u,t.getIconUrl=i,t.getDescription=c}var n={restrict:"E",templateUrl:"directives/city/city.html",link:t,scope:{city:"="}};return n}angular.module("openWeather.directives",[]).directive("city",t)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
